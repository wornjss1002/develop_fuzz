from typing import List, Dict
from data_models import (
    FinalReportData, 
    FinalExploitReport, 
    ExploitScenario,
    IExploitCheck
)

from exploit_plugin.cookie_leak import CookieTheftCheck
from exploit_plugin.info_leak import CsrfChainingCheck

class XssExploitModule:
    def __init__(self, callback_server_url):
        self.callback_server = callback_server_url
        
        # --- 2. 모든 '부품' 인스턴스를 리스트에 꽂아넣습니다 ---
        self.checkers: List[IExploitCheck] = [
            CookieTheftCheck(),
            DomScrapingCheck(),
            CsrfChainingCheck(),
            KeyloggingCheck(),
            MediaHijackingCheck(),
        ]
        print(f"[+] 익스플로잇 모듈: {len(self.checkers)}개의 시나리오 플러그인 로드 완료.")

    def generate_report(self, data: FinalReportData) -> FinalExploitReport:
        """
        [컨트롤러]로부터 'FinalReportData' 객체를 받아,
        등록된 모든 '부품'을 실행하고 그 결과를 취합하여 최종 리포트를 생성합니다.
        """
        
        all_scenarios = []
        
        # --- 3. '메인보드'의 역할: 등록된 부품들을 순회하며 'check'만 호출 ---
        for checker in self.checkers:
            # 각 부품(checker)에게 데이터와 콜백서버 정보를 넘겨주고 검사를 시킴
            scenario_result = checker.check(data, self.callback_server)
            
            if scenario_result:
                all_scenarios.append(scenario_result)

        # 4. data_models.py에 정의한 최종 리포트 객체로 포장하여 반환
        final_report = FinalExploitReport(
            injection_point=data.point,
            successful_payload=data.result.successful_payload,
            scenarios=all_scenarios
        )
        
        return final_report